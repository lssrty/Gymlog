package sali.test;
// Generated by ComTest BEGIN
import java.io.File;
import sali.*;
import java.util.*;
import static org.junit.Assert.*;
import org.junit.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2021.03.27 16:11:58 // Generated by ComTest
 *
 */
@SuppressWarnings("all")
public class LiikkeetTest {



  // Generated by ComTest BEGIN
  /** 
   * testLisaa57 
   * @throws SailoException when error
   */
  @Test
  public void testLisaa57() throws SailoException {    // Liikkeet: 57
    Liikkeet liikkeet = new Liikkeet(); 
    Liike kyykky = new Liike(), penkki = new Liike(), maastaveto = new Liike(),
    dippi = new Liike(), pystypunnerrus = new Liike(), alatalja = new Liike(), testi = new Liike(); 
    kyykky.setLiikeNimi("kyykky"); penkki.setLiikeNimi("penkki"); maastaveto.setLiikeNimi("maastaveto"); 
    dippi.setLiikeNimi("dippi"); pystypunnerrus.setLiikeNimi("pystypunnerrus"); alatalja.setLiikeNimi("alatalja"); 
    testi.setLiikeNimi("kyykky"); 
    assertEquals("From: Liikkeet line: 65", 0, liikkeet.getLkm()); 
    liikkeet.lisaa(kyykky); assertEquals("From: Liikkeet line: 66", 1, liikkeet.getLkm()); 
    try {
    liikkeet.lisaa(testi); 
    fail("Liikkeet: 67 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
    liikkeet.lisaa(penkki); assertEquals("From: Liikkeet line: 68", 2, liikkeet.getLkm()); 
    liikkeet.lisaa(maastaveto); assertEquals("From: Liikkeet line: 69", 3, liikkeet.getLkm()); 
    try {
    liikkeet.lisaa(maastaveto); 
    fail("Liikkeet: 70 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
    assertEquals("From: Liikkeet line: 71", kyykky, liikkeet.anna(0)); 
    assertEquals("From: Liikkeet line: 72", penkki, liikkeet.anna(1)); 
    assertEquals("From: Liikkeet line: 73", maastaveto, liikkeet.anna(2)); 
    assertEquals("From: Liikkeet line: 74", false, liikkeet.anna(1) == kyykky); 
    assertEquals("From: Liikkeet line: 75", true, liikkeet.anna(1) == penkki); 
    try {
    assertEquals("From: Liikkeet line: 76", kyykky, liikkeet.anna(3)); 
    fail("Liikkeet: 76 Did not throw IndexOutOfBoundsException");
    } catch(IndexOutOfBoundsException _e_){ _e_.getMessage(); }
    liikkeet.lisaa(dippi); assertEquals("From: Liikkeet line: 77", 4, liikkeet.getLkm()); 
    liikkeet.lisaa(pystypunnerrus); assertEquals("From: Liikkeet line: 78", 5, liikkeet.getLkm()); 
    liikkeet.lisaa(alatalja); assertEquals("From: Liikkeet line: 79", 6, liikkeet.getLkm()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testPoista109 
   * @throws SailoException when error
   */
  @Test
  public void testPoista109() throws SailoException {    // Liikkeet: 109
    Liikkeet liikkeet = new Liikkeet(); 
    Liike kyykky = new Liike(), penkki = new Liike(), maastaveto = new Liike(); 
    kyykky.rekisteroi(); penkki.rekisteroi(); maastaveto.rekisteroi(); 
    kyykky.setLiikeNimi("kyykky"); penkki.setLiikeNimi("penkki"); maastaveto.setLiikeNimi("maastaveto"); 
    int id1 = kyykky.getLiikeID(); 
    liikkeet.lisaa(kyykky); liikkeet.lisaa(penkki); liikkeet.lisaa(maastaveto); 
    assertEquals("From: Liikkeet line: 117", 1, liikkeet.poista(id1+1)); 
    assertEquals("From: Liikkeet line: 118", null, liikkeet.annaId(id1+1)); assertEquals("From: Liikkeet line: 118", 2, liikkeet.getLkm()); 
    assertEquals("From: Liikkeet line: 119", 1, liikkeet.poista(id1)); assertEquals("From: Liikkeet line: 119", 1, liikkeet.getLkm()); 
    assertEquals("From: Liikkeet line: 120", 0, liikkeet.poista(id1+3)); assertEquals("From: Liikkeet line: 120", 1, liikkeet.getLkm()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testLueTiedostosta140 
   * @throws SailoException when error
   */
  @Test
  public void testLueTiedostosta140() throws SailoException {    // Liikkeet: 140
    Liikkeet liikkeet = new Liikkeet(); 
    Liike kyykky = new Liike(), penkki = new Liike(), maastaveto = new Liike(); 
    kyykky.rekisteroi(); 
    kyykky.setLiikeNimi("kyykky"); 
    penkki.rekisteroi(); 
    penkki.setLiikeNimi("penkki"); 
    maastaveto.rekisteroi(); 
    maastaveto.setLiikeNimi("maastaveto"); 
    String hakemisto = "testiliikkeet"; 
    String tiedNimi = hakemisto+"/liikkeet"; 
    File ftied = new File(tiedNimi+".dat"); 
    File dir = new File(hakemisto); 
    dir.mkdir(); 
    ftied.delete(); 
    try {
    liikkeet.lueTiedostosta(tiedNimi); 
    fail("Liikkeet: 158 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
    liikkeet.lisaa(kyykky); 
    liikkeet.lisaa(penkki); 
    liikkeet.tallenna(); 
    liikkeet = new Liikkeet(); 
    liikkeet.lueTiedostosta(tiedNimi); 
    Iterator<Liike> i = liikkeet.iterator(); 
    assertEquals("From: Liikkeet line: 165", kyykky.toString(), i.next().toString()); 
    assertEquals("From: Liikkeet line: 166", penkki.toString(), i.next().toString()); 
    assertEquals("From: Liikkeet line: 167", false, i.hasNext()); 
    liikkeet.lisaa(maastaveto); 
    liikkeet.tallenna(); 
    assertEquals("From: Liikkeet line: 170", true, ftied.delete()); 
    File fbak = new File(tiedNimi+".bak"); 
    assertEquals("From: Liikkeet line: 172", true, fbak.delete()); 
    assertEquals("From: Liikkeet line: 173", true, dir.delete()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testAnnaId260 
   * @throws SailoException when error
   */
  @Test
  public void testAnnaId260() throws SailoException {    // Liikkeet: 260
    Liikkeet liikkeet = new Liikkeet(); 
    Liike kyykky = new Liike(), penkki = new Liike(), maastaveto = new Liike(); 
    kyykky.rekisteroi(); penkki.rekisteroi(); maastaveto.rekisteroi(); 
    kyykky.setLiikeNimi("kyykky"); penkki.setLiikeNimi("penkki"); maastaveto.setLiikeNimi("maastaveto"); 
    int id1 = kyykky.getLiikeID(); 
    liikkeet.lisaa(kyykky); liikkeet.lisaa(penkki); liikkeet.lisaa(maastaveto); 
    assertEquals("From: Liikkeet line: 268", true, liikkeet.annaId(id1  ) == kyykky); 
    assertEquals("From: Liikkeet line: 269", true, liikkeet.annaId(id1+1) == penkki); 
    assertEquals("From: Liikkeet line: 270", true, liikkeet.annaId(id1+2) == maastaveto); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testOnkoLiike286 
   * @throws SailoException when error
   */
  @Test
  public void testOnkoLiike286() throws SailoException {    // Liikkeet: 286
    Liikkeet liikkeet = new Liikkeet(); 
    Liike kyykky = new Liike(), penkki = new Liike(), maastaveto = new Liike(); 
    kyykky.rekisteroi(); penkki.rekisteroi(); maastaveto.rekisteroi(); 
    kyykky.setLiikeNimi("kyykky"); penkki.setLiikeNimi("penkki"); maastaveto.setLiikeNimi("maastaveto"); 
    liikkeet.lisaa(kyykky); liikkeet.lisaa(penkki); liikkeet.lisaa(maastaveto); 
    assertEquals("From: Liikkeet line: 293", false, liikkeet.onkoLiike("leuanveto")); 
    assertEquals("From: Liikkeet line: 294", true, liikkeet.onkoLiike("kyykky")); 
    assertEquals("From: Liikkeet line: 295", true, liikkeet.onkoLiike("maastaveto")); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testLiikkeetIterator345 
   * @throws SailoException when error
   */
  @Test
  public void testLiikkeetIterator345() throws SailoException {    // Liikkeet: 345
    Liikkeet liikkeet = new Liikkeet(); 
    Liike kyykky = new Liike(), penkki = new Liike(), maastaveto = new Liike(); 
    kyykky.rekisteroi(); penkki.rekisteroi(); maastaveto.rekisteroi(); 
    kyykky.setLiikeNimi("kyykky"); penkki.setLiikeNimi("penkki"); maastaveto.setLiikeNimi("maastaveto"); 
    liikkeet.lisaa(kyykky); liikkeet.lisaa(penkki); liikkeet.lisaa(maastaveto); 
    StringBuffer ids = new StringBuffer(30); 
    for (Liike liike:liikkeet) // Kokeillaan for-silmukan toimintaa
    ids.append(" "+liike.getLiikeID()); 
    String tulos = " " + kyykky.getLiikeID() + " " + penkki.getLiikeID() + " " + maastaveto.getLiikeID(); 
    assertEquals("From: Liikkeet line: 363", tulos, ids.toString()); 
    ids = new StringBuffer(30); 
    for (Iterator<Liike>  i=liikkeet.iterator(); i.hasNext(); ) { // ja iteraattorin toimintaa
    Liike liike = i.next(); 
    ids.append(" "+liike.getLiikeID()); 
    }
    assertEquals("From: Liikkeet line: 371", tulos, ids.toString()); 
    Iterator<Liike>  i=liikkeet.iterator(); 
    assertEquals("From: Liikkeet line: 374", true, i.next() == kyykky); 
    assertEquals("From: Liikkeet line: 375", true, i.next() == penkki); 
    assertEquals("From: Liikkeet line: 376", true, i.next() == maastaveto); 
    try {
    i.next(); 
    fail("Liikkeet: 378 Did not throw NoSuchElementException");
    } catch(NoSuchElementException _e_){ _e_.getMessage(); }
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testEtsiId448 
   * @throws SailoException when error
   */
  @Test
  public void testEtsiId448() throws SailoException {    // Liikkeet: 448
    Liikkeet liikkeet = new Liikkeet(); 
    Liike kyykky = new Liike(), penkki = new Liike(), maastaveto = new Liike(); 
    kyykky.rekisteroi(); penkki.rekisteroi(); maastaveto.rekisteroi(); 
    kyykky.setLiikeNimi("kyykky"); penkki.setLiikeNimi("penkki"); maastaveto.setLiikeNimi("maastaveto"); 
    int id1 = kyykky.getLiikeID(); 
    liikkeet.lisaa(kyykky); liikkeet.lisaa(penkki); liikkeet.lisaa(maastaveto); 
    assertEquals("From: Liikkeet line: 456", 1, liikkeet.etsiId(id1+1)); 
    assertEquals("From: Liikkeet line: 457", 2, liikkeet.etsiId(id1+2)); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testAnnaLiikkeet471 
   * @throws SailoException when error
   */
  @Test
  public void testAnnaLiikkeet471() throws SailoException {    // Liikkeet: 471
    Liikkeet liikelista = new Liikkeet(); 
    Liike liike1 = new Liike(); liike1.setLiikeNimi("liike1"); liikelista.lisaa(liike1); 
    Liike liike2 = new Liike(); liike2.setLiikeNimi("liike2"); liikelista.lisaa(liike2); 
    Liike liike3 = new Liike(); liike3.setLiikeNimi("liike3"); liikelista.lisaa(liike3); 
    Liike liike4 = new Liike(); liike4.setLiikeNimi("liike4"); liikelista.lisaa(liike4); 
    Liike liike5 = new Liike(); liike5.setLiikeNimi("liike5"); liikelista.lisaa(liike5); 
    List<Liike> loytyneet; 
    loytyneet = liikelista.annaLiikkeet(); 
    assertEquals("From: Liikkeet line: 484", 5, loytyneet.size()); 
    assertEquals("From: Liikkeet line: 485", true, loytyneet.get(0) == liike1); 
    assertEquals("From: Liikkeet line: 486", true, loytyneet.get(3) == liike4); 
  } // Generated by ComTest END
}