package sali.test;
// Generated by ComTest BEGIN
import java.io.File;
import sali.*;
import java.util.*;
import static org.junit.Assert.*;
import org.junit.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2021.03.06 20:41:40 // Generated by ComTest
 *
 */
@SuppressWarnings("all")
public class LiikkeetTest {



  // Generated by ComTest BEGIN
  /** 
   * testLisaa57 
   * @throws SailoException when error
   */
  @Test
  public void testLisaa57() throws SailoException {    // Liikkeet: 57
    Liikkeet liikkeet = new Liikkeet(); 
    Liike kyykky = new Liike(), penkki = new Liike(), maastaveto = new Liike(),
    dippi = new Liike(), pystypunnerrus = new Liike(), alatalja = new Liike(); 
    assertEquals("From: Liikkeet line: 62", 0, liikkeet.getLkm()); 
    liikkeet.lisaa(kyykky); assertEquals("From: Liikkeet line: 63", 1, liikkeet.getLkm()); 
    liikkeet.lisaa(penkki); assertEquals("From: Liikkeet line: 64", 2, liikkeet.getLkm()); 
    liikkeet.lisaa(maastaveto); assertEquals("From: Liikkeet line: 65", 3, liikkeet.getLkm()); 
    try {
    liikkeet.lisaa(maastaveto); 
    fail("Liikkeet: 66 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
    assertEquals("From: Liikkeet line: 67", kyykky, liikkeet.anna(0)); 
    assertEquals("From: Liikkeet line: 68", penkki, liikkeet.anna(1)); 
    assertEquals("From: Liikkeet line: 69", maastaveto, liikkeet.anna(2)); 
    assertEquals("From: Liikkeet line: 70", false, liikkeet.anna(1) == kyykky); 
    assertEquals("From: Liikkeet line: 71", true, liikkeet.anna(1) == penkki); 
    try {
    assertEquals("From: Liikkeet line: 72", kyykky, liikkeet.anna(3)); 
    fail("Liikkeet: 72 Did not throw IndexOutOfBoundsException");
    } catch(IndexOutOfBoundsException _e_){ _e_.getMessage(); }
    liikkeet.lisaa(dippi); assertEquals("From: Liikkeet line: 73", 4, liikkeet.getLkm()); 
    liikkeet.lisaa(pystypunnerrus); assertEquals("From: Liikkeet line: 74", 5, liikkeet.getLkm()); 
    liikkeet.lisaa(alatalja); assertEquals("From: Liikkeet line: 75", 6, liikkeet.getLkm()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testPoista99 
   * @throws SailoException when error
   */
  @Test
  public void testPoista99() throws SailoException {    // Liikkeet: 99
    Liikkeet liikkeet = new Liikkeet(); 
    Liike kyykky = new Liike(), penkki = new Liike(), maastaveto = new Liike(); 
    kyykky.rekisteroi(); penkki.rekisteroi(); maastaveto.rekisteroi(); 
    int id1 = kyykky.getLiikeID(); 
    liikkeet.lisaa(kyykky); liikkeet.lisaa(penkki); liikkeet.lisaa(maastaveto); 
    assertEquals("From: Liikkeet line: 106", 1, liikkeet.poista(id1+1)); 
    assertEquals("From: Liikkeet line: 107", null, liikkeet.annaId(id1+1)); assertEquals("From: Liikkeet line: 107", 2, liikkeet.getLkm()); 
    assertEquals("From: Liikkeet line: 108", 1, liikkeet.poista(id1)); assertEquals("From: Liikkeet line: 108", 1, liikkeet.getLkm()); 
    assertEquals("From: Liikkeet line: 109", 0, liikkeet.poista(id1+3)); assertEquals("From: Liikkeet line: 109", 1, liikkeet.getLkm()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testLueTiedostosta132 
   * @throws SailoException when error
   */
  @Test
  public void testLueTiedostosta132() throws SailoException {    // Liikkeet: 132
    Liikkeet liikkeet = new Liikkeet(); 
    Liike kyykky = new Liike(), penkki = new Liike(); 
    kyykky.rekisteroi(); 
    kyykky.setLiikeNimi("kyykky"); 
    penkki.rekisteroi(); 
    penkki.setLiikeNimi("penkki"); 
    String hakemisto = "testiliikkeet"; 
    String tiedNimi = hakemisto+"/liikkeet"; 
    File ftied = new File(tiedNimi+".dat"); 
    File dir = new File(hakemisto); 
    dir.mkdir(); 
    ftied.delete(); 
    try {
    liikkeet.lueTiedostosta(tiedNimi); 
    fail("Liikkeet: 148 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
    liikkeet.lisaa(kyykky); 
    liikkeet.lisaa(penkki); 
    liikkeet.tallenna(); 
    liikkeet = new Liikkeet();  // Poistetaan vanhat luomalla uusi
    liikkeet.lueTiedostosta(tiedNimi);  // johon ladataan tiedot tiedostosta. TÄMÄ RIVI AIHEUTTAA ENSIMMÄISEN VIRHEEN
    Iterator<Liike> i = liikkeet.iterator(); 
    assertEquals("From: Liikkeet line: 155", kyykky, i.next());  // i.next() -RIVIT AIHEUTTAA SEURAAVAN VIRHEEN
    assertEquals("From: Liikkeet line: 156", penkki, i.next()); 
    assertEquals("From: Liikkeet line: 157", false, i.hasNext()); 
    liikkeet.lisaa(penkki); 
    liikkeet.tallenna(); 
    assertEquals("From: Liikkeet line: 160", true, ftied.delete()); 
    File fbak = new File(tiedNimi+".bak"); 
    assertEquals("From: Liikkeet line: 162", true, fbak.delete()); 
    assertEquals("From: Liikkeet line: 163", true, dir.delete()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testAnnaId255 
   * @throws SailoException when error
   */
  @Test
  public void testAnnaId255() throws SailoException {    // Liikkeet: 255
    Liikkeet liikkeet = new Liikkeet(); 
    Liike kyykky = new Liike(), penkki = new Liike(), maastaveto = new Liike(); 
    kyykky.rekisteroi(); penkki.rekisteroi(); maastaveto.rekisteroi(); 
    int id1 = kyykky.getLiikeID(); 
    liikkeet.lisaa(kyykky); liikkeet.lisaa(penkki); liikkeet.lisaa(maastaveto); 
    assertEquals("From: Liikkeet line: 262", true, liikkeet.annaId(id1  ) == kyykky); 
    assertEquals("From: Liikkeet line: 263", true, liikkeet.annaId(id1+1) == penkki); 
    assertEquals("From: Liikkeet line: 264", true, liikkeet.annaId(id1+2) == maastaveto); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testLiikkeetIterator314 
   * @throws SailoException when error
   */
  @Test
  public void testLiikkeetIterator314() throws SailoException {    // Liikkeet: 314
    Liikkeet liikkeet = new Liikkeet(); 
    Liike kyykky = new Liike(), penkki = new Liike(), maastaveto = new Liike(); 
    kyykky.rekisteroi(); penkki.rekisteroi(); maastaveto.rekisteroi(); 
    liikkeet.lisaa(kyykky); liikkeet.lisaa(penkki); liikkeet.lisaa(maastaveto); 
    StringBuffer ids = new StringBuffer(30); 
    for (Liike liike:liikkeet) // Kokeillaan for-silmukan toimintaa
    ids.append(" "+liike.getLiikeID()); 
    String tulos = " " + kyykky.getLiikeID() + " " + penkki.getLiikeID() + " " + maastaveto.getLiikeID(); 
    assertEquals("From: Liikkeet line: 331", tulos, ids.toString()); 
    ids = new StringBuffer(30); 
    for (Iterator<Liike>  i=liikkeet.iterator(); i.hasNext(); ) { // ja iteraattorin toimintaa
    Liike liike = i.next(); 
    ids.append(" "+liike.getLiikeID()); 
    }
    assertEquals("From: Liikkeet line: 339", tulos, ids.toString()); 
    Iterator<Liike>  i=liikkeet.iterator(); 
    assertEquals("From: Liikkeet line: 342", true, i.next() == kyykky); 
    assertEquals("From: Liikkeet line: 343", true, i.next() == penkki); 
    assertEquals("From: Liikkeet line: 344", true, i.next() == maastaveto); 
    try {
    i.next(); 
    fail("Liikkeet: 346 Did not throw NoSuchElementException");
    } catch(NoSuchElementException _e_){ _e_.getMessage(); }
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testEtsiId416 
   * @throws SailoException when error
   */
  @Test
  public void testEtsiId416() throws SailoException {    // Liikkeet: 416
    Liikkeet liikkeet = new Liikkeet(); 
    Liike kyykky = new Liike(), penkki = new Liike(), maastaveto = new Liike(); 
    kyykky.rekisteroi(); penkki.rekisteroi(); maastaveto.rekisteroi(); 
    int id1 = kyykky.getLiikeID(); 
    liikkeet.lisaa(kyykky); liikkeet.lisaa(penkki); liikkeet.lisaa(maastaveto); 
    assertEquals("From: Liikkeet line: 423", 1, liikkeet.etsiId(id1+1)); 
    assertEquals("From: Liikkeet line: 424", 2, liikkeet.etsiId(id1+2)); 
  } // Generated by ComTest END
}