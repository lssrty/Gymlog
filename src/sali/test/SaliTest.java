package sali.test;
// Generated by ComTest BEGIN
import sali.SailoException;
import java.util.*;
import java.io.*;
import static org.junit.Assert.*;
import org.junit.*;
import sali.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2021.03.25 16:40:00 // Generated by ComTest
 *
 */
@SuppressWarnings("all")
public class SaliTest {


  // Generated by ComTest BEGIN  // Sali: 40
   private Sali sali; 
   private Suoritus kyykkysarja1; 
   private Suoritus kyykkysarja2; 
   private int sid1; 
   private int sid2; 
   private Harjoitus treeni21; 
   private Harjoitus treeni11; 
   private Harjoitus treeni22; 
   private Harjoitus treeni12; 
   private Harjoitus treeni23; 

   public void alustaSali() {
     sali = new Sali(); 
     kyykkysarja1 = new Suoritus(); kyykkysarja1.taytaKyykkyTiedoilla(); kyykkysarja1.rekisteroi(); 
     kyykkysarja2 = new Suoritus(); kyykkysarja2.taytaKyykkyTiedoilla(); kyykkysarja2.rekisteroi(); 
     sid1 = kyykkysarja1.getTunnusNro(); 
     sid2 = kyykkysarja2.getTunnusNro(); 
     treeni21 = new Harjoitus(); treeni21.rekisteroi(); 
     treeni11 = new Harjoitus(); treeni11.rekisteroi(); 
     treeni22 = new Harjoitus(); treeni22.rekisteroi(); 
     treeni12 = new Harjoitus(); treeni12.rekisteroi(); 
     treeni23 = new Harjoitus(); treeni23.rekisteroi(); 
     try {
     sali.lisaa(kyykkysarja1); 
     sali.lisaa(kyykkysarja2); 
     sali.lisaa(treeni21); 
     sali.lisaa(treeni11); 
     sali.lisaa(treeni22); 
     sali.lisaa(treeni12); 
     sali.lisaa(treeni23); 
     } catch ( Exception e) {
        System.err.println(e.getMessage()); 
     }
   }
  // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testLisaa89 
   * @throws SailoException when error
   */
  @Test
  public void testLisaa89() throws SailoException {    // Sali: 89
    Sali sali = new Sali(); 
    Suoritus kyykkysarja1 = new Suoritus(), kyykkysarja2 = new Suoritus(); 
    kyykkysarja1.rekisteroi(); kyykkysarja2.rekisteroi(); 
    assertEquals("From: Sali line: 94", 0, sali.getSuorituksia()); 
    sali.lisaa(kyykkysarja1); assertEquals("From: Sali line: 95", 1, sali.getSuorituksia()); 
    sali.lisaa(kyykkysarja2); assertEquals("From: Sali line: 96", 2, sali.getSuorituksia()); 
    sali.lisaa(kyykkysarja1); assertEquals("From: Sali line: 97", 3, sali.getSuorituksia()); 
    assertEquals("From: Sali line: 98", 3, sali.getSuorituksia()); 
    assertEquals("From: Sali line: 99", kyykkysarja1, sali.annaSuoritus(0)); 
    assertEquals("From: Sali line: 100", kyykkysarja2, sali.annaSuoritus(1)); 
    assertEquals("From: Sali line: 101", kyykkysarja1, sali.annaSuoritus(2)); 
    try {
    assertEquals("From: Sali line: 102", kyykkysarja1, sali.annaSuoritus(3)); 
    fail("Sali: 102 Did not throw IndexOutOfBoundsException");
    } catch(IndexOutOfBoundsException _e_){ _e_.getMessage(); }
    sali.lisaa(kyykkysarja1); assertEquals("From: Sali line: 103", 4, sali.getSuorituksia()); 
    sali.lisaa(kyykkysarja1); assertEquals("From: Sali line: 104", 5, sali.getSuorituksia()); 
    sali.lisaa(kyykkysarja1); assertEquals("From: Sali line: 105", 6, sali.getSuorituksia()); 
    sali.lisaa(kyykkysarja1); assertEquals("From: Sali line: 106", 7, sali.getSuorituksia()); 
    sali.lisaa(kyykkysarja1); assertEquals("From: Sali line: 107", 8, sali.getSuorituksia()); 
    sali.lisaa(kyykkysarja1); assertEquals("From: Sali line: 108", 9, sali.getSuorituksia()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testLisaa121 
   * @throws SailoException when error
   */
  @Test
  public void testLisaa121() throws SailoException {    // Sali: 121
    Sali sali = new Sali(); 
    Harjoitus harjoitus1 = new Harjoitus(); 
    Harjoitus harjoitus2 = new Harjoitus(); 
    assertEquals("From: Sali line: 126", 0, sali.getHarjoituksia()); 
    sali.lisaa(harjoitus1); sali.lisaa(harjoitus2); 
    assertEquals("From: Sali line: 128", 2, sali.getHarjoituksia()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testLisaa141 
   * @throws SailoException when error
   */
  @Test
  public void testLisaa141() throws SailoException {    // Sali: 141
    Sali sali = new Sali(); 
    Liike kyykky = new Liike(), penkki = new Liike(); 
    kyykky.rekisteroi(); penkki.rekisteroi(); 
    kyykky.setLiikeNimi("kyykky"); 
    penkki.setLiikeNimi("penkki"); 
    assertEquals("From: Sali line: 148", 0, sali.getLiikkeita()); 
    sali.lisaa(kyykky); sali.lisaa(penkki); 
    assertEquals("From: Sali line: 150", 2, sali.getLiikkeita()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testKorvaaTaiLisaa164 
   * @throws SailoException when error
   */
  @Test
  public void testKorvaaTaiLisaa164() throws SailoException {    // Sali: 164
    alustaSali(); 
    Suoritus kyykkysarja5 = new Suoritus(); 
    kyykkysarja5.rekisteroi(); 
    assertEquals("From: Sali line: 169", 2, sali.getSuorituksia()); 
    sali.korvaaTaiLisaa(kyykkysarja1); 
    assertEquals("From: Sali line: 171", 2, sali.getSuorituksia()); 
    sali.korvaaTaiLisaa(kyykkysarja5); 
    assertEquals("From: Sali line: 173", 3, sali.getSuorituksia()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testAnnaSuoritukset198 
   * @throws SailoException when error
   */
  @Test
  public void testAnnaSuoritukset198() throws SailoException {    // Sali: 198
    Sali sali = new Sali(); 
    Harjoitus treeni1 = new Harjoitus(), treeni2 = new Harjoitus(), treeni3 = new Harjoitus(); 
    treeni1.rekisteroi(); treeni2.rekisteroi(); treeni3.rekisteroi(); 
    int id1 = treeni1.getHarjoitusID(); 
    int id2 = treeni2.getHarjoitusID(); 
    Suoritus kyykky11 = new Suoritus(id1); sali.lisaa(kyykky11); 
    Suoritus kyykky12 = new Suoritus(id1); sali.lisaa(kyykky12); 
    Suoritus kyykky21 = new Suoritus(id2); sali.lisaa(kyykky21); 
    Suoritus kyykky22 = new Suoritus(id2); sali.lisaa(kyykky22); 
    Suoritus kyykky23 = new Suoritus(id2); sali.lisaa(kyykky23); 
    List<Suoritus> loytyneet; 
    loytyneet = sali.annaSuoritukset(treeni3); 
    assertEquals("From: Sali line: 215", 0, loytyneet.size()); 
    loytyneet = sali.annaSuoritukset(treeni1); 
    assertEquals("From: Sali line: 217", 2, loytyneet.size()); 
    assertEquals("From: Sali line: 218", true, loytyneet.get(0) == kyykky11); 
    assertEquals("From: Sali line: 219", true, loytyneet.get(1) == kyykky12); 
    loytyneet = sali.annaSuoritukset(treeni2); 
    assertEquals("From: Sali line: 221", 3, loytyneet.size()); 
    assertEquals("From: Sali line: 222", true, loytyneet.get(0) == kyykky21); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testLueTiedostosta270 
   * @throws SailoException when error
   */
  @Test
  public void testLueTiedostosta270() throws SailoException {    // Sali: 270
    Sali sali = new Sali(); 
    Harjoitus reeni1 = new Harjoitus(); reeni1.rekisteroi(); 
    Harjoitus reeni2 = new Harjoitus(); reeni2.rekisteroi(); 
    Suoritus kyykky1 = new Suoritus(); kyykky1.taytaKyykkyTiedoilla(reeni1.getHarjoitusID()); kyykky1.rekisteroi(); 
    Suoritus kyykky2 = new Suoritus(); kyykky2.taytaKyykkyTiedoilla(reeni1.getHarjoitusID()); kyykky2.rekisteroi(); 
    Suoritus kyykky3 = new Suoritus(); kyykky3.taytaKyykkyTiedoilla(reeni2.getHarjoitusID()); kyykky3.rekisteroi(); 
    Suoritus kyykky4 = new Suoritus(); kyykky4.taytaKyykkyTiedoilla(reeni2.getHarjoitusID()); kyykky4.rekisteroi(); 
    Liike kyykky = new Liike(), penkki = new Liike(), maastaveto = new Liike(); 
    kyykky.rekisteroi(); penkki.rekisteroi(); maastaveto.rekisteroi(); 
    kyykky.setLiikeNimi("kyykky"); penkki.setLiikeNimi("penkki"); maastaveto.setLiikeNimi("maastaveto"); 
    String hakemisto = "testiharjoittelija"; 
    File dir = new File(hakemisto); 
    File fhtied  = new File(hakemisto+"/harjoitukset.dat"); 
    File fltied = new File(hakemisto+"/liikkeet.dat"); 
    File fstied = new File(hakemisto+"/suoritukset.dat"); 
    dir.mkdir(); 
    fhtied.delete(); 
    fltied.delete(); 
    fstied.delete(); 
    sali.lueTiedostosta(hakemisto); 
    sali.lisaa(reeni1); 
    sali.lisaa(reeni2); 
    sali.lisaa(kyykky1); 
    sali.lisaa(kyykky2); 
    sali.lisaa(kyykky3); 
    sali.lisaa(kyykky4); 
    sali.tallenna(); 
    sali = new Sali(); 
    sali.lueTiedostosta(hakemisto); 
    Collection<Suoritus> kaikki = sali.annaSuoritukset(1); 
    Iterator<Suoritus> it = kaikki.iterator(); 
    assertEquals("From: Sali line: 310", kyykky1.toString(), it.next().toString()); 
    assertEquals("From: Sali line: 311", kyykky2.toString(), it.next().toString()); 
    assertEquals("From: Sali line: 312", false, it.hasNext()); 
    List<Suoritus> loytyneet = sali.annaSuoritukset(reeni1); 
    Iterator<Suoritus> ih = loytyneet.iterator(); 
    assertEquals("From: Sali line: 315", kyykky1.toString(), ih.next().toString()); 
    assertEquals("From: Sali line: 316", kyykky2.toString(), ih.next().toString()); 
    assertEquals("From: Sali line: 317", false, ih.hasNext()); 
    loytyneet = sali.annaSuoritukset(reeni2); 
    ih = loytyneet.iterator(); 
    assertEquals("From: Sali line: 320", kyykky3.toString(), ih.next().toString()); 
    assertEquals("From: Sali line: 321", kyykky4.toString(), ih.next().toString()); 
    assertEquals("From: Sali line: 322", false, ih.hasNext()); 
    sali.lisaa(reeni2); 
    sali.lisaa(kyykky4); 
    Liike kulmasoutu = new Liike(); kulmasoutu.rekisteroi(); kulmasoutu.setLiikeNimi("kulmasoutu"); 
    sali.lisaa(kulmasoutu); 
    sali.tallenna(); 
    assertEquals("From: Sali line: 328", true, fhtied.delete()); 
    assertEquals("From: Sali line: 329", true, fltied.delete()); 
    assertEquals("From: Sali line: 330", true, fstied.delete()); 
    File fhbak = new File(hakemisto+"/harjoitukset.bak"); 
    File flbak = new File(hakemisto+"/liikkeet.bak"); 
    File fsbak = new File(hakemisto+"/suoritukset.bak"); 
    assertEquals("From: Sali line: 334", true, fhbak.delete()); 
    flbak.delete();  // === true;
    assertEquals("From: Sali line: 336", true, fsbak.delete()); 
    assertEquals("From: Sali line: 337", true, dir.delete()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testOnkoLiike415 
   * @throws SailoException when error
   */
  @Test
  public void testOnkoLiike415() throws SailoException {    // Sali: 415
    Sali sali = new Sali(); 
    Liike kyykky = new Liike(), penkki = new Liike(); 
    kyykky.rekisteroi(); penkki.rekisteroi(); 
    kyykky.setLiikeNimi("kyykky"); 
    penkki.setLiikeNimi("penkki"); 
    sali.lisaa(kyykky); sali.lisaa(penkki); 
    assertEquals("From: Sali line: 423", false, sali.onkoLiike("petteri")); 
    assertEquals("From: Sali line: 424", true, sali.onkoLiike("kyykky")); 
  } // Generated by ComTest END
}