package sali.test;
// Generated by ComTest BEGIN
import java.io.File;
import sali.*;
import java.util.*;
import static org.junit.Assert.*;
import org.junit.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2021.03.07 15:36:37 // Generated by ComTest
 *
 */
@SuppressWarnings("all")
public class SuorituksetTest {



  // Generated by ComTest BEGIN
  /** testLisaa55 */
  @Test
  public void testLisaa55() {    // Suoritukset: 55
    Suoritukset suoritukset = new Suoritukset(); 
    Suoritus kyykkysarja1 = new Suoritus(), kyykkysarja2 = new Suoritus(); 
    assertEquals("From: Suoritukset line: 58", 0, suoritukset.getLkm()); 
    suoritukset.lisaa(kyykkysarja1); assertEquals("From: Suoritukset line: 59", 1, suoritukset.getLkm()); 
    suoritukset.lisaa(kyykkysarja2); assertEquals("From: Suoritukset line: 60", 2, suoritukset.getLkm()); 
    suoritukset.lisaa(kyykkysarja1); assertEquals("From: Suoritukset line: 61", 3, suoritukset.getLkm()); 
    assertEquals("From: Suoritukset line: 62", kyykkysarja1, suoritukset.anna(0)); 
    assertEquals("From: Suoritukset line: 63", kyykkysarja2, suoritukset.anna(1)); 
    assertEquals("From: Suoritukset line: 64", kyykkysarja1, suoritukset.anna(2)); 
    assertEquals("From: Suoritukset line: 65", false, suoritukset.anna(1) == kyykkysarja1); 
    assertEquals("From: Suoritukset line: 66", true, suoritukset.anna(1) == kyykkysarja2); 
    try {
    assertEquals("From: Suoritukset line: 67", kyykkysarja1, suoritukset.anna(3)); 
    fail("Suoritukset: 67 Did not throw IndexOutOfBoundsException");
    } catch(IndexOutOfBoundsException _e_){ _e_.getMessage(); }
    suoritukset.lisaa(kyykkysarja1); assertEquals("From: Suoritukset line: 68", 4, suoritukset.getLkm()); 
    suoritukset.lisaa(kyykkysarja1); assertEquals("From: Suoritukset line: 69", 5, suoritukset.getLkm()); 
    suoritukset.lisaa(kyykkysarja1); assertEquals("From: Suoritukset line: 70", 6, suoritukset.getLkm()); 
    suoritukset.lisaa(kyykkysarja1); assertEquals("From: Suoritukset line: 71", 7, suoritukset.getLkm()); 
    suoritukset.lisaa(kyykkysarja1); assertEquals("From: Suoritukset line: 72", 8, suoritukset.getLkm()); 
    suoritukset.lisaa(kyykkysarja1); assertEquals("From: Suoritukset line: 73", 9, suoritukset.getLkm());  // Tässä luodaan kasvatettu taulukko, jotta kaikki mahtuu
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testLueTiedostosta96 
   * @throws SailoException when error
   */
  @Test
  public void testLueTiedostosta96() throws SailoException {    // Suoritukset: 96
    Suoritukset suoritteet = new Suoritukset(); 
    Suoritus kyykky21 = new Suoritus(2); kyykky21.taytaKyykkyTiedoilla(2); 
    Suoritus kyykky11 = new Suoritus(1); kyykky11.taytaKyykkyTiedoilla(1); 
    Suoritus kyykky22 = new Suoritus(2); kyykky22.taytaKyykkyTiedoilla(2); 
    Suoritus kyykky12 = new Suoritus(1); kyykky12.taytaKyykkyTiedoilla(1); 
    Suoritus kyykky23 = new Suoritus(2); kyykky23.taytaKyykkyTiedoilla(2); 
    String tiedNimi = "testisuoritukset"; 
    File ftied = new File(tiedNimi+".dat"); 
    ftied.delete(); 
    try {
    suoritteet.lueTiedostosta(tiedNimi); 
    fail("Suoritukset: 108 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
    suoritteet.lisaa(kyykky21); 
    suoritteet.lisaa(kyykky11); 
    suoritteet.lisaa(kyykky22); 
    suoritteet.lisaa(kyykky12); 
    suoritteet.lisaa(kyykky23); 
    suoritteet.tallenna(); 
    suoritteet = new Suoritukset(); 
    suoritteet.lueTiedostosta(tiedNimi); 
    Iterator<Suoritus> i = suoritteet.iterator(); 
    assertEquals("From: Suoritukset line: 118", kyykky21.toString(), i.next().toString()); 
    assertEquals("From: Suoritukset line: 119", kyykky11.toString(), i.next().toString()); 
    assertEquals("From: Suoritukset line: 120", kyykky22.toString(), i.next().toString()); 
    assertEquals("From: Suoritukset line: 121", kyykky12.toString(), i.next().toString()); 
    assertEquals("From: Suoritukset line: 122", kyykky23.toString(), i.next().toString()); 
    assertEquals("From: Suoritukset line: 123", false, i.hasNext()); 
    suoritteet.lisaa(kyykky23); 
    suoritteet.tallenna(); 
    assertEquals("From: Suoritukset line: 126", true, ftied.delete()); 
    File fbak = new File(tiedNimi+".bak"); 
    assertEquals("From: Suoritukset line: 128", true, fbak.delete()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testSuorituksetIterator249 
   * @throws SailoException when error
   */
  @Test
  public void testSuorituksetIterator249() throws SailoException {    // Suoritukset: 249
    Suoritukset suoritukset = new Suoritukset(); 
    Suoritus kyykkysarja1 = new Suoritus(), kyykkysarja2 = new Suoritus(), kyykkysarja3 = new Suoritus(); 
    kyykkysarja1.rekisteroi(); kyykkysarja2.rekisteroi(); kyykkysarja3.rekisteroi(); 
    suoritukset.lisaa(kyykkysarja1); suoritukset.lisaa(kyykkysarja2); suoritukset.lisaa(kyykkysarja3); 
    StringBuffer ids = new StringBuffer(30); 
    for (Suoritus suoritus:suoritukset) // Kokeillaan for-silmukan toimintaa
    ids.append(" "+suoritus.getTunnusNro()); 
    String tulos = " " + kyykkysarja1.getTunnusNro() + " " + kyykkysarja2.getTunnusNro() + " " + kyykkysarja3.getTunnusNro(); 
    assertEquals("From: Suoritukset line: 266", tulos, ids.toString()); 
    ids = new StringBuffer(30); 
    for (Iterator<Suoritus>  i=suoritukset.iterator(); i.hasNext(); ) { // ja iteraattorin toimintaa
    Suoritus suoritus = i.next(); 
    ids.append(" "+suoritus.getTunnusNro()); 
    }
    assertEquals("From: Suoritukset line: 274", tulos, ids.toString()); 
    Iterator<Suoritus>  i=suoritukset.iterator(); 
    assertEquals("From: Suoritukset line: 277", true, i.next() == kyykkysarja1); 
    assertEquals("From: Suoritukset line: 278", true, i.next() == kyykkysarja2); 
    assertEquals("From: Suoritukset line: 279", true, i.next() == kyykkysarja3); 
    try {
    i.next(); 
    fail("Suoritukset: 281 Did not throw NoSuchElementException");
    } catch(NoSuchElementException _e_){ _e_.getMessage(); }
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testIterator324 */
  @Test
  public void testIterator324() {    // Suoritukset: 324
    Suoritukset suoritteet = new Suoritukset(); 
    Suoritus kyykky21 = new Suoritus(2); suoritteet.lisaa(kyykky21); 
    Suoritus kyykky11 = new Suoritus(1); suoritteet.lisaa(kyykky11); 
    Suoritus kyykky22 = new Suoritus(2); suoritteet.lisaa(kyykky22); 
    Suoritus kyykky12 = new Suoritus(1); suoritteet.lisaa(kyykky12); 
    Suoritus kyykky23 = new Suoritus(2); suoritteet.lisaa(kyykky23); 
    Iterator<Suoritus> i2=suoritteet.iterator(); 
    assertEquals("From: Suoritukset line: 336", kyykky21, i2.next()); 
    assertEquals("From: Suoritukset line: 337", kyykky11, i2.next()); 
    assertEquals("From: Suoritukset line: 338", kyykky22, i2.next()); 
    assertEquals("From: Suoritukset line: 339", kyykky12, i2.next()); 
    assertEquals("From: Suoritukset line: 340", kyykky23, i2.next()); 
    try {
    assertEquals("From: Suoritukset line: 341", kyykky12, i2.next()); 
    fail("Suoritukset: 341 Did not throw NoSuchElementException");
    } catch(NoSuchElementException _e_){ _e_.getMessage(); }
    int n = 0; 
    int hnrot[] = { 2,1,2,1,2} ; 
    for ( Suoritus suo:suoritteet ) {
    assertEquals("From: Suoritukset line: 347", hnrot[n], suo.getHarjoitusID()); n++; 
    }
    assertEquals("From: Suoritukset line: 350", 5, n); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testAnnaSuoritukset365 */
  @Test
  public void testAnnaSuoritukset365() {    // Suoritukset: 365
    Suoritukset suoritteet = new Suoritukset(); 
    Suoritus kyykky21 = new Suoritus(2); suoritteet.lisaa(kyykky21); 
    Suoritus kyykky11 = new Suoritus(1); suoritteet.lisaa(kyykky11); 
    Suoritus kyykky22 = new Suoritus(2); suoritteet.lisaa(kyykky22); 
    Suoritus kyykky12 = new Suoritus(1); suoritteet.lisaa(kyykky12); 
    Suoritus kyykky23 = new Suoritus(2); suoritteet.lisaa(kyykky23); 
    Suoritus kyykky51 = new Suoritus(5); suoritteet.lisaa(kyykky51); 
    List<Suoritus> loytyneet; 
    loytyneet = suoritteet.annaSuoritukset(3); 
    assertEquals("From: Suoritukset line: 378", 0, loytyneet.size()); 
    loytyneet = suoritteet.annaSuoritukset(1); 
    assertEquals("From: Suoritukset line: 380", 2, loytyneet.size()); 
    assertEquals("From: Suoritukset line: 381", true, loytyneet.get(0) == kyykky11); 
    assertEquals("From: Suoritukset line: 382", true, loytyneet.get(1) == kyykky12); 
    loytyneet = suoritteet.annaSuoritukset(5); 
    assertEquals("From: Suoritukset line: 384", 1, loytyneet.size()); 
    assertEquals("From: Suoritukset line: 385", true, loytyneet.get(0) == kyykky51); 
  } // Generated by ComTest END
}